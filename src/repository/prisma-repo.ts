/* eslint-disable @typescript-eslint/ban-ts-comment */
//! Do not edit this file manually, it is generate by `prisma repo generator`

import { PrismaClient, Prisma, doctors, patients } from "@prisma/client";
import _ from "lodash";

// eslint-disable-next-line @typescript-eslint/no-explicit-any
export type AnyRecord = Record<string, any>;

export type BaseOption<Include, Select> = {
  include?: Include;
  select?: Select;
};

export type Find<Select, Include, Cursor, Order, Distinct> = BaseOption<
  Include,
  Select
> & {
  cursor?: Cursor;
  take?: number;
  skip?: number;
  orderBy?: Prisma.Enumerable<Order>;
  distinct?: Distinct;
};

export type CountArgs<Select, Cursor, Order, Distinct> = Omit<
  Find<Select, never, Cursor, Order, Distinct>,
  "include"
>;

export type Aggregate<Cursor, Order, Distinct> = Omit<
  CountArgs<never, Cursor, Order, Distinct>,
  "select" | "distinct"
>;

export const prisma = new PrismaClient();

export const models = _.omit(prisma, [
  "$on",
  "$connect",
  "$disconnect",
  "$use",
  "$executeRaw",
  "$executeRawUnsafe",
  "$queryRaw",
  "$queryRawUnsafe",
  "$transaction",
]);

export const MODELS_NAME = {
  DOCTORS: "doctors",
  PATIENTS: "patients",
} as const;

// eslint-disable-next-line @typescript-eslint/ban-types
export type ModelStructure = {
  doctors: doctors;
  patients: patients;
};

export type ModelName = keyof ModelStructure;

export type ModelScalarFields<T extends keyof ModelStructure> =
  Prisma.Enumerable<keyof ModelStructure[T]>;

// export type ModelDelegate =
//   | Prisma.RejectOnNotFound
//   | Prisma.RejectPerOperation
//   | undefined;

export type ModelTypes<T = unknown> = {
  doctors: {
    Where: Prisma.doctorsWhereInput;
    Select: Prisma.doctorsSelect;
    Include: unknown;
    Create: Prisma.doctorsCreateInput | Prisma.doctorsUncheckedCreateInput;
    Update: Prisma.doctorsUpdateInput | Prisma.doctorsUncheckedUpdateInput;
    Cursor: Prisma.doctorsWhereUniqueInput;
    Order: Prisma.doctorsOrderByWithRelationInput;
    // Delegate: Prisma.doctorsDelegate<ModelDelegate>;
    // GroupBy: Prisma.doctorsGroupByOutputType;
    // @ts-ignore
    Return: Prisma.doctorsGetPayload<T>;
  };
  patients: {
    Where: Prisma.patientsWhereInput;
    Select: Prisma.patientsSelect;
    Include: unknown;
    Create: Prisma.patientsCreateInput | Prisma.patientsUncheckedCreateInput;
    Update: Prisma.patientsUpdateInput | Prisma.patientsUncheckedUpdateInput;
    Cursor: Prisma.patientsWhereUniqueInput;
    Order: Prisma.patientsOrderByWithRelationInput;
    // Delegate: Prisma.patientsDelegate<ModelDelegate>;
    // GroupBy: Prisma.patientsGroupByOutputType;
    // @ts-ignore
    Return: Prisma.patientsGetPayload<T>;
  };
};
